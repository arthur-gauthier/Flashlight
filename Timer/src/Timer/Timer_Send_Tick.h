/*2023-03-30T15:07:49.440990948Z*/

/**********************************************************************
 * Timer_Send_Tick.h
 *
 * generated by : embedded software producer/ESPActivityCCodeGen 0.0.1
 **********************************************************************/

#ifndef TIMER_SEND_TICK_H
#define TIMER_SEND_TICK_H

#include "Functions_Send_Tick.h"

#include <stdint.h>
#if defined( __cplusplus) || (defined(__STDC_VERSION__) && (__STDC_VERSION__ >= 199901L))
#include <stdbool.h>
#else
#ifndef bool
#define bool    int
#endif

#ifndef true
#define true    1
#endif

#ifndef false
#define false   0
#endif
#endif /* stdbool check */

#include "Timer_itf.h"
#include "Timer_Send_Tick_internal_type.h"

typedef enum {
    TIMER_SEND_TICK_EVENT_T_NO_EVENT
} TIMER_SEND_TICK_EVENT_T;

#ifndef ESP_TYPES
#define ESP_TYPES
/* BEG_USER_CODE(local-types) do not remove */

typedef double  WALLCLOCK_T;  /* time type (can be any scalar) */
typedef void *  USERDATA_T;   /* replace this pointer by an anonymous struct if needed. */

/* END_USER_CODE(local-types) do not remove */
#endif

#ifndef TRUE
#define TRUE    ((Boolean)true)
#endif

#ifndef FALSE
#define FALSE   ((Boolean)false)
#endif

typedef struct Timer_Send_Tick_struct {
    /* user data */
    USERDATA_T                  USERDATA;

    /* called behaviors */
    Functions_Send_Tick_struct  node_2_Send_Tick;

    /* events */
    TIMER_SEND_TICK_EVENT_T     EVENT;
    TIMER_SEND_TICK_EVENT_T     (*peekEVENT)(struct Timer_Send_Tick_struct *instance); /* returns the first event in the event-queue or NO_EVENT when empty */
    TIMER_SEND_TICK_EVENT_T     (*nextEVENT)(struct Timer_Send_Tick_struct *instance); /* removes the first event in the event-queue  and returns the new first one or NO_EVENT if empty */
    Boolean                     (*sendEVENT)(struct Timer_Send_Tick_struct *instance, TIMER_SEND_TICK_EVENT_T event); /* send an event in the queue. Returns false if this can't be done (e.g. queue is full), and true otherwise. */

    /* internal */
    uint32_t                    flow[1];
    WALLCLOCK_T                 WALL_CLOCK;
} Timer_Send_Tick_struct;

void _basic_Timer_Send_Tick_init(Timer_Send_Tick_struct *instance);
Boolean _basic_Timer_Send_Tick(Timer_Send_Tick_struct *instance);
void _basic_Timer_Send_Tick_end(Timer_Send_Tick_struct *instance);

/* BEG_USER_CODE(extra-header) do not remove */

/* insert here things you need to add to the header file */

/* END_USER_CODE(extra-header) do not remove */

#endif /*TIMER_SEND_TICK_H*/
/* end of file */
