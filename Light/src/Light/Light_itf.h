/*2023-03-30T15:08:14.922243136Z*/

/**********************************************************************
 * Light_itf.h
 * Header File containing the definition of component: Light
 *
 * generated by : embedded software producer / runtime code gen 1.0.0
 **********************************************************************/

#ifndef RTE_Light_ITF_H
#define RTE_Light_ITF_H

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */


/* Includes -------------------------------------*/
#include "Light_type.h"

// Workaround: define a default value for instances if not declared outside but it should not be here
#ifndef CONTRACT_VALIDATION
#include "rte_cfg.h" // define NB_INST_LIGHT
#else
#define NB_INST_LIGHT 1
#endif

/* RTE Component Structure declaration ----------*/
typedef struct{
	/* Write functions */
	void (*Write_pout_io)(Boolean* msg);
	/* Trigger functions */
	/* Read functions */
	void (*Read_light_snd)(Boolean* msg);
	void (*Read_light_On)(SignalEvent_On_type* msg);
	void (*Read_light_Off)(SignalEvent_Off_type* msg);
	void (*Read_light_Tick)(SignalEvent_Tick_type* msg);
	void (*Read_InputSignal_Tick)(SignalEvent_Tick_type* msg);
	/* Server call functions */
	/* Activation period for components cyclically invoked, -1 otherwise */
	double period;
	/* pointer to user section */
	void* user_section;
}Rte_Light_Struct;

/* Runnable functions declaration--------------- */
void Light_Light(Rte_Light_Struct* instance);
void Light_Light_init(Rte_Light_Struct* instance);

#ifndef RTE_C

/* Runnable API Mapping -------------------------*/
#define Light Light_Light
#define Light_init Light_Light_init

/* Instance handle type -------------------------*/
typedef Rte_Light_Struct* /*const*/ Rte_Instance;

#ifdef RTE_CONTRACT
/* RTE Contract For Documentation Purpose --------*/
/* Write functions declaration */
void RTE_Write_pout_io(Rte_Instance instance, Boolean* msg);
/* Trigger functions declaration */
/* Read functions declaration*/
void RTE_Read_light_snd(Rte_Instance instance, Boolean* msg);
void RTE_Read_light_On(Rte_Instance instance, SignalEvent_On_type* msg);
void RTE_Read_light_Off(Rte_Instance instance, SignalEvent_Off_type* msg);
void RTE_Read_light_Tick(Rte_Instance instance, SignalEvent_Tick_type* msg);
void RTE_Read_InputSignal_Tick(Rte_Instance instance, SignalEvent_Tick_type* msg);
/* Server call functions declaration*/

#else

/* RTE API Mapping ------------------------------*/
#define RTE_Read_light_snd(inst, data) (inst)->Read_light_snd(data)
#define RTE_Read_light_On(inst, data) (inst)->Read_light_On(data)
#define RTE_Read_light_Off(inst, data) (inst)->Read_light_Off(data)
#define RTE_Read_light_Tick(inst, data) (inst)->Read_light_Tick(data)
#define RTE_Write_pout_io(inst, data) (inst)->Write_pout_io(data)
#define RTE_Read_InputSignal_Tick(inst, data) (inst)->Read_InputSignal_Tick(data)
#endif

#endif /* #ifndef RTE_C*/

#ifdef __cplusplus
} /* extern "C" */
#endif /* __cplusplus */

#endif /* Light_ITF_H */
